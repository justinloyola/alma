[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "alma-backend"
version = "0.1.0"
description = "Backend for Alma application"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]

[tool.hatch.build]
packages = ["app"]

[tool.hatch.build.targets.wheel]
packages = ["app"]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "email-validator>=2.1.0",
    "python-json-logger>=2.0.7",
    "python-magic>=0.4.27; sys_platform != 'win32'",
    "python-magic-bin>=0.4.14; sys_platform == 'win32'",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "pydantic>=2.5.1",
    "pydantic-settings>=2.0.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]

[tool.ruff]
# Enable pycodestyle (E) and pyflakes (F) codes by default
select = ["E", "F", "I"]
ignore = [
    # Allow unused imports when they are used for type checking
    "F401",  # `module` imported but unused
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Exclude commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Set the maximum line length
target-version = "py311"
line-length = 88

[tool.ruff.mccabe]
# Maximum complexity for functions/methods/etc.
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.uv]
# UV-specific settings can go here

[project.scripts]
alma = "app.main:main"

[tool.hatch.envs.default.scripts]
# Lint and format code
lint = "ruff check . --fix"
format = "ruff format ."
typecheck = "mypy app"
# Run all checks
check = ["lint", "format", "typecheck"]
# Run tests with coverage
test = "pytest --cov=app --cov-report=term-missing"
# Run all checks and tests
all = ["check", "test"]
